
import os
from philutil import PhilConfig


class ProcGen(object):

    """The ProcGen module autogenerates ITOS proc files that must be dynamically generated by the MoonEx ITOS toolchain."""

    def __init__(self, proc_dir):
        """
        Initializes the CtrlSourceGen module by parsing the MoonEx phil INI configuration file.
        """
        self.philconfig = PhilConfig()
        self.procdir = os.path.abspath(proc_dir)


    def generate_setup_environment_proc(self, single_pil=False, sim=False, command_console=False):
        with open(self.procdir+"/setup_environment.proc", "w") as proc:

            # start the proc
            proc.write("PROC setup_environment\n\n")

            # write out the current vehicle configuration
            proc.write("GLOBAL GBL_VEHICLE_CFG\n")
            proc.write("GLOBAL GBL_CONSOLE_MODE\n\n")
            proc.write("GBL_VEHICLE_CFG=")

            if single_pil:
                proc.write('"PIL"')
            elif sim:
                proc.write('"HIL"')
            else:
                proc.write('"VEH"')

            proc.write("\n")

            if command_console:
                proc.write('GBL_CONSOLE_MODE="COMMANDER"\n')
            else:
                proc.write('GBL_CONSOLE_MODE="VIEWER"\n')

            # end the proc
            proc.write("\nENDPROC\n")


    def generate_init_cmd_graphs_proc(self, phil, single_pil=False, sim=False, sim_namespace=None):
        """
        """
        print ("  Populating proc start_command_graph for " + phil + " " + self.philconfig.get_config(phil, "type").upper())

        with open(self.procdir+"/init_cmd_graphs.proc", "w") as proc:

            # start the proc
            proc.write("PROC start_cmd_graphs\n\n")

            # start the command graphs
            proc.write("GRAPH START CmdGraph\n")
            if sim and not single_pil:
                proc.write("GRAPH START " + sim_namespace + "CmdGraph\n")

            # associate the command graphs
            fsw_host = self.philconfig.get_config(phil, "hostname")
            proc.write("\n@CmdGraph." + fsw_host + ".associate\n")
            proc.write("@set_" + fsw_host + " value=" + fsw_host + "\n\n")
            if sim and not single_pil:
                sim_host = self.philconfig.get_config(phil, "simHostname")
                proc.write("@" + sim_namespace + "CmdGraph." + sim_host + ".associate\n")
                proc.write("@set_" + sim_host + " value=" + sim_host + "\n")

            # end the proc
            proc.write("\nENDPROC\n")



    def generate_attach_tlm_sources_proc(self, phil, single_pil=False, sim=False, sim_namespace=None):
        """
        """
        print ("  Populating proc attach_tlm_sources for " + phil + " " + self.philconfig.get_config(phil, "type").upper())

        with open(self.procdir+"/attach_tlm_sources.proc", "w") as proc:

            # start the proc
            proc.write("PROC attach_tlm_sources\n\n")

            # attach the telemetry sources to VC1
            fsw_host = self.philconfig.get_config(phil, "hostname")
            proc.write("AC ATTACH " + fsw_host + " VC1\n")
            if sim and single_pil is False:
                sim_host = self.philconfig.get_config(phil, "simHostname")
                proc.write("AC ATTACH " + sim_host + " VC1\n")

            # end the proc
            proc.write("\nENDPROC\n")



    def generate_pipe_event_logs_proc(self, phil, single_pil=False, sim=False):
        """
        """
        print ("  Populating proc pipe_event_logs for " + phil + " " + self.philconfig.get_config(phil, "type").upper())

        with open(self.procdir+"/pipe_event_logs.proc", "w") as proc:

            # start the proc
            proc.write("PROC pipe_event_logs\n\n")

            # start the eventlog sequential print
            proc.write("SEQPRT event_log >EVT\n")
            if sim and not single_pil:
                proc.write("SEQPRT sim_event_log >EVT\n")

            # end the proc
            proc.write("\nENDPROC\n")



    def generate_archiver_procs(self, phil, single_pil=False, sim=False):
        """
        Autogenerate procs that begin the archiver for the autogenerated telemetry sources.
        """
        print ("  Populating run_archiver proc for " + phil + " " + self.philconfig.get_config(phil, "type").upper())

        vehicle_host = self.philconfig.get_config(phil, "hostname")

        with open(self.procdir+"/run_archiver.proc", "w") as proc:

            # start the proc
            proc.write("PROC run_archiver(filename)\n\n")

            # check the proc parameters
            proc.write("IF (ISNULL(filename)) THEN\n")
            proc.write("\tASK \"You must provide an archive filename to this proc\"\n")
            proc.write("\tRETURN\nENDIF\n\n")

            # start the vehicle archive
            proc.write("SHOVAL \"Starting archive\"\n")
            proc.write("AR " + vehicle_host + " FRAME FILE=filename\n")
            proc.write("SHOVAL concat(\"Archiving vehicle telemetry to \", filename)\n")

            if not single_pil and sim:
                sim_host = self.philconfig.get_config(phil, "simHostname")

                proc.write("\nLOCAL sim_filename\n\n")
                proc.write("sim_filename=CONCAT(filename,\".sim\")\n")
                proc.write("AR " + sim_host + " FRAME FILE=sim_filename\n")
                proc.write("SHOVAL concat(\"Archiving sim telemetry to \", sim_filename)\n")


            # end the proc
            proc.write("\nENDPROC\n")

        with open(self.procdir+"/stop_archiver.proc", "w") as proc:

            # start the proc
            proc.write("PROC stop_archiver(filename)\n\n")

            # check the proc parameters
            proc.write("IF (ISNULL(filename)) THEN\n")
            proc.write("\tASK \"You must provide an archive filename to this proc\"\n")
            proc.write("\tRETURN\nENDIF\n\n")

            # start the vehicle archive
            proc.write("SHOVAL concat(\"Stopping vehicle archive \", filename)\n")
            proc.write("AR STOP FILE=filename\n")

            if not single_pil and sim:
                sim_host = self.philconfig.get_config(phil, "simHostname")

                proc.write("\nLOCAL sim_filename\n\n")
                proc.write("sim_filename=CONCAT(filename,\".sim\")\n")
                proc.write("SHOVAL concat(\"Stopping sim archive \", sim_filename)\n")
                proc.write("AR STOP FILE=sim_filename\n")

            # end the proc
            proc.write("\nENDPROC\n")



