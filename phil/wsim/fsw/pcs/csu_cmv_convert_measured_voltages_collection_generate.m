%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2010 - 2015 Moon Express, Inc.
% All Rights Reserved.
%
% PROPRIETARY DATA NOTICE:
% The data herein include Proprietary Data and are restricted under the
% Data Rights provisions of Lunar CATALYST Space Act Agreement
% No. SAAM ID# 18251 and Reimbursable Space Act Agreement No.SAA2-402930.
% All information contained herein is and remains proprietary to and the
% property of Moon Express, Inc. Dissemination of this information or
% reproduction of this material is strictly forbidden unless prior
% written permission is obtained from Moon Express, Inc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function csu_cmv_convert_measured_voltages_collection_generate

nimbus_root = getenv('NIMBUS_ROOT');
if isempty(nimbus_root)
    error('NIMBUS_ROOT is not set -- first run nimbus_set_path');
end

sys = 'csu_cmv_convert_measured_voltages_collection_lib';
subsys = [sys '/csu_cmv_convert_measured_voltages_collection'];


try
    load_system(sys);
catch
    error('Cannot load csu_cmv_convert_measured_voltages_collection_lib. Cannot proceed.')
end

% At this point, we have the existing library open -- nuke the subsystem so we can start fresh
fprintf(1, 'Regenerating csu_cmv_convert_measured_voltages_collection_lib...\n');
set_param(sys, 'Lock', 'off');

try
    delete_block(subsys);
catch
    % Subsystem doesn't exist -- no bother
end

vlv_mask_display = ...
[ ...
    'color(''blue'');' ...
    'text(0.05, 0.02, ''MoonEx'', ''HorizontalAlignment'', ''Left'', ''VerticalAlignment'', ''Bottom'');' ...
    'color(''red'');' ...
    'text(0.95, 0.02, ''Autogenerated'', ''HorizontalAlignment'', ''Right'', ''VerticalAlignment'', ''Bottom'');' ...
];

% Add the actual subsystem 
add_block('built-in/Subsystem', subsys, 'BackgroundColor', 'LightBlue', 'MaskDisplay', vlv_mask_display, 'MaskIconOpaque', 'off', 'Position', [200 200 415 340]);
add_block('built-in/Note', [subsys '/AUTOGENERATED BY ' mfilename char(10) 'DO NOT EDIT'], 'FontWeight', 'bold', 'FontSize', '14', 'Position', [700 0 0 -40]);

% load in analog conversions from C&T dictionary
[bus_signal_names, conversion_map] = create_analog_conversion_maps('volt');

n_signals = double(conversion_map.Count);
temp_concat_h = n_signals*45;

add_block('built-in/Inport', [subsys '/adio_msg'], 'BackgroundColor', 'green', 'Port', '1', 'Position',[20 (128+temp_concat_h/2-7) 50 (128+temp_concat_h/2+7)]);
add_block('built-in/BusSelector', [subsys '/count_bus'], 'ShowName', 'off', 'OutputSignals', strjoin(bus_signal_names,','), 'Position', [100 128 105 (128+temp_concat_h)]);

% Add the information block to the subsystem
add_block('util_info_lib/Library Information', [subsys '/Library Information'], 'MaskValues', {'''escrane'''}, 'Position', [0 -300 430 -100]);

add_line(subsys, 'adio_msg/1', 'count_bus/1');


add_block('built-in/BusCreator', [subsys '/volt_bus'], 'Inputs', int2str(n_signals),'ShowName', 'off', 'Position', [1100 128 1105 (128+temp_concat_h)]);
add_block('built-in/Outport', [subsys '/volt_bus_out'], 'BackgroundColor', 'red', 'Port', '1', 'Position', [1150 (128+temp_concat_h/2-7) 1180 (128+temp_concat_h/2+7)]);
add_line(subsys, 'volt_bus/1', 'volt_bus_out/1');

csu_tdl_pos = [370 138 420 158];

for i=1:n_signals

    i_str = num2str(i);
    
    signal_name = bus_signal_names{i};
    
    add_block('simulink/Signal Attributes/Data Type Conversion', [subsys '/cmv_double_' i_str], 'Position', csu_tdl_pos - [100 0 100 0]);
    set_param([subsys '/cmv_double_' i_str], 'OutDataTypeStr', 'double')
    
    % check if signal has conversion
    if ~strcmp(conversion_map(signal_name), 'none')
        fcn_expr = regexprep(conversion_map(signal_name), 'x', 'u');
    else
        fcn_expr = 'u';
    end
    add_block('simulink/User-Defined Functions/Fcn', [subsys '/cmv_fcn_' i_str], 'Expr', fcn_expr, 'Position', csu_tdl_pos);
    
    add_line(subsys, ['count_bus/' i_str], ['cmv_double_' i_str '/1']);
    
    add_line(subsys, ['cmv_double_' i_str '/1'], ['cmv_fcn_' i_str '/1']);
    
    add_line(subsys, ['cmv_fcn_' i_str '/1'], ['volt_bus/' i_str]);
    
    port_handles = get_param([subsys '/cmv_fcn_' i_str], 'PortHandles');
    
    line_to_bus_creator = get_param(port_handles.Outport, 'Line');
    set_param(line_to_bus_creator, 'Name', bus_signal_names{i})

    % update subsystem position to be further down the screen
    csu_tdl_pos = csu_tdl_pos + [0 45 0 45];

end

% We're done! Save, close, and exit
save_system(sys, [nimbus_root '/fsw/pcs/' sys '.slx']);
close_system(sys);

end

