%% File : sfun_orb.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for sfun_orb
%%
%% Simulink version      : 8.2 (R2013b) 08-Aug-2013
%% TLC file generated on : 11-Nov-2013 17:00:55

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sfun_orb';
     def.InitializeConditionsFcnSpec = 'void initialize_orb(uint16 p1, void** work1)';
     def.OutputFcnSpec = 'void outputs_orb(uint8 u1[307200], uint8 u2[307200], double u3[2], double y1[16][2], double y2[16][2], void** work1)';
     def.TerminateFcnSpec = 'void terminate_orb(void** work1)';
     def.HeaderFiles = {'sfun_orb_wrapper.h'};
     def.SourceFiles = {'orb_obj.cpp', 'sfun_orb_wrapper.cpp', 'algorithm.cpp', 'alloc.cpp', 'arithm.cpp', 'array.cpp', 'calibration.cpp', 'color.cpp', 'convert.cpp', 'copy.cpp', 'datastructs.cpp', 'descriptors.cpp', 'detectors.cpp', 'drawing.cpp', 'fast.cpp', 'fast_score.cpp', 'filter.cpp', 'fundam.cpp', 'histogram.cpp', 'imgwarp.cpp', 'keypoint.cpp', 'lapack.cpp', 'matchers.cpp', 'mathfuncs.cpp', 'matmul.cpp', 'matop.cpp', 'matrix.cpp', 'modelest.cpp', 'orb.cpp', 'parallel.cpp', 'pyramids.cpp', 'smooth.cpp', 'stat.cpp', 'system.cpp', 'thresh.cpp', 'undistort.cpp', 'utils.cpp'};
     def.IncPaths = {'#fullfile(getenv('NIMBUS_ROOT'), 'externals', 'minopencv')#', '#fullfile(getenv('NIMBUS_ROOT'), 'externals', 'minopencv', 'include')#', '#fullfile(getenv('NIMBUS_ROOT'), 'externals', 'minopencv', 'include', 'opencv2')#'};
     def.SrcPaths = {'#fullfile(getenv('NIMBUS_ROOT'), 'externals', 'minopencv')#'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sfun_orb "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("sfun_orb_wrapper.h")>
  %<SLibAddToStaticSources("orb_obj.cpp")>
  %<SLibAddToStaticSources("sfun_orb_wrapper.cpp")>
  %<SLibAddToStaticSources("algorithm.cpp")>
  %<SLibAddToStaticSources("alloc.cpp")>
  %<SLibAddToStaticSources("arithm.cpp")>
  %<SLibAddToStaticSources("array.cpp")>
  %<SLibAddToStaticSources("calibration.cpp")>
  %<SLibAddToStaticSources("color.cpp")>
  %<SLibAddToStaticSources("convert.cpp")>
  %<SLibAddToStaticSources("copy.cpp")>
  %<SLibAddToStaticSources("datastructs.cpp")>
  %<SLibAddToStaticSources("descriptors.cpp")>
  %<SLibAddToStaticSources("detectors.cpp")>
  %<SLibAddToStaticSources("drawing.cpp")>
  %<SLibAddToStaticSources("fast.cpp")>
  %<SLibAddToStaticSources("fast_score.cpp")>
  %<SLibAddToStaticSources("filter.cpp")>
  %<SLibAddToStaticSources("fundam.cpp")>
  %<SLibAddToStaticSources("histogram.cpp")>
  %<SLibAddToStaticSources("imgwarp.cpp")>
  %<SLibAddToStaticSources("keypoint.cpp")>
  %<SLibAddToStaticSources("lapack.cpp")>
  %<SLibAddToStaticSources("matchers.cpp")>
  %<SLibAddToStaticSources("mathfuncs.cpp")>
  %<SLibAddToStaticSources("matmul.cpp")>
  %<SLibAddToStaticSources("matop.cpp")>
  %<SLibAddToStaticSources("matrix.cpp")>
  %<SLibAddToStaticSources("modelest.cpp")>
  %<SLibAddToStaticSources("orb.cpp")>
  %<SLibAddToStaticSources("parallel.cpp")>
  %<SLibAddToStaticSources("pyramids.cpp")>
  %<SLibAddToStaticSources("smooth.cpp")>
  %<SLibAddToStaticSources("stat.cpp")>
  %<SLibAddToStaticSources("system.cpp")>
  %<SLibAddToStaticSources("thresh.cpp")>
  %<SLibAddToStaticSources("undistort.cpp")>
  %<SLibAddToStaticSources("utils.cpp")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: InitializeConditions  ========================================
%%
%function InitializeConditions (block, system) Output
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  initialize_orb( (uint16_T)%<p1_val>, %<work1_ptr>);
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
  %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
  %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
  %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
  %%
  outputs_orb( (uint8_T*)%<u1_ptr>, (uint8_T*)%<u2_ptr>, (real_T*)%<u3_ptr>, %<y1_ptr>, %<y2_ptr>, %<work1_ptr>);
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  terminate_orb( %<work1_ptr>);
  %%
%endfunction

%% [EOF]
