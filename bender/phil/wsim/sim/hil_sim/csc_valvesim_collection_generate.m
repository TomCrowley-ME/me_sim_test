%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2010 - 2015 Moon Express, Inc.
% All Rights Reserved.
%
% PROPRIETARY DATA NOTICE:
% The data herein include Proprietary Data and are restricted under the
% Data Rights provisions of Lunar CATALYST Space Act Agreement
% No. SAAM ID# 18251 and Reimbursable Space Act Agreement No.SAA2-402930.
% All information contained herein is and remains proprietary to and the
% property of Moon Express, Inc. Dissemination of this information or
% reproduction of this material is strictly forbidden unless prior
% written permission is obtained from Moon Express, Inc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function csc_valvesim_collection_generate(thruster_list, vehicle)

nimbus_root = getenv('NIMBUS_ROOT');
if isempty(nimbus_root)
    error('NIMBUS_ROOT is not set -- first run nimbus_set_path');
end

if strcmp(vehicle, 'schooner') || ~isempty( strfind(vehicle, 'mtv') )    
    gen_for_mtv = 1;   
else
    gen_for_mtv = 0;
end

if gen_for_mtv
    fprintf(1,'Generating for MTV\n')
    
    sys = 'csc_valvesim_collection_mtv_lib';
    subsys = [sys '/csc_valvesim_collection_mtv'];
    
else
    fprintf(1,'Generating for NIMBUS\n')
    
    sys = 'csc_valvesim_collection_lib';
    subsys = [sys '/csc_valvesim_collection'];
end



sc_num_thruster = length(thruster_list);

try
    load_system(sys);
catch
    error('Cannot load csc_valvesim_collection_lib. Cannot proceed.')
end

% At this point, we have the existing library open -- nuke the subsystem so we can start fresh
fprintf(1, 'Regenerating csc_valvesim_collection...\n');
set_param(sys, 'Lock', 'off');

try
    delete_block(subsys);
catch
    % Subsystem doesn't exist -- no bother
end

vlv_mask_display = ...
[ ...
    'color(''blue'');' ...
    'text(0.05, 0.02, ''MoonEx'', ''HorizontalAlignment'', ''Left'', ''VerticalAlignment'', ''Bottom'');' ...
    'color(''red'');' ...
    'text(0.95, 0.02, ''Autogenerated'', ''HorizontalAlignment'', ''Right'', ''VerticalAlignment'', ''Bottom'');' ...
];

% Add the actual subsystem 
if gen_for_mtv
    add_block('built-in/Subsystem', subsys, 'BackgroundColor', 'orange', 'MaskDisplay', vlv_mask_display, 'MaskIconOpaque', 'off', 'Position', [200 200 415 340]);
else
    add_block('built-in/Subsystem', subsys, 'BackgroundColor', 'yellow', 'MaskDisplay', vlv_mask_display, 'MaskIconOpaque', 'off', 'Position', [200 200 415 340]);
end
add_block('built-in/Note', [subsys '/AUTOGENERATED BY ' mfilename char(10) 'DO NOT EDIT'], 'FontWeight', 'bold', 'FontSize', '14', 'Position', [700 0 0 -40]);
add_block('util_info_lib/Library Information', [subsys '/Library Information'], 'ShowName', 'off', 'Position', [0 -300 430 -100]);

timeColor = '[0.262745, 0.458824, 0.650980]';

% Add the time construction logic and its corresponding goto
add_block('built-in/Inport', [subsys '/cfe_time_msg'], 'BackgroundColor', 'green', 'Port', '3', 'Position', [20 30 50 44]);
add_block('built-in/BusSelector', [subsys '/time_selector'], 'ShowName', 'off', 'OutputSignals', 'utc_seconds,utc_mseconds', 'Position', [80 5 85 69]);
add_block('built-in/DataTypeConversion', [subsys '/sec_conversion'], 'ShowName', 'off', 'OutDataTypeStr', 'double', 'Position', [175 15 220 29]);
add_block('built-in/DataTypeConversion', [subsys '/subsec_conversion'], 'ShowName', 'off', 'OutDataTypeStr', 'double', 'Position', [175 45 220 59]);
add_block('built-in/Gain', [subsys '/subsec_gain'], 'ShowName', 'off', 'Gain', '0.001', 'Position', [245 37 295 67]);
add_block('built-in/Sum', [subsys '/time_sum'], 'ShowName', 'off', 'IconShape', 'Round', 'Inputs', '|++', 'Position', [310 12 330 32]);
add_block('built-in/Goto', [subsys '/goto_time'], 'BackgroundColor', timeColor, 'GotoTag', 'time', 'Position', [350 10 405 25], 'ShowName', 'off');

add_line(subsys, 'cfe_time_msg/1', 'time_selector/1');
add_line(subsys, 'time_selector/1', 'sec_conversion/1');
add_line(subsys, 'time_selector/2', 'subsec_conversion/1');
add_line(subsys, 'subsec_conversion/1', 'subsec_gain/1');
add_line(subsys, 'subsec_gain/1', 'time_sum/2', 'autorouting', 'on');
add_line(subsys, 'sec_conversion/1', 'time_sum/1');
add_line(subsys, 'time_sum/1', 'goto_time/1');

% Add the thruster_delay input port & go_to
add_block('built-in/Inport', [subsys '/thruster_delay'], 'BackgroundColor', 'green', 'Port', '2', 'Position',[20 134 50 148]);
add_block('built-in/Goto', [subsys '/goto_delay'], 'BackgroundColor', 'cyan', 'GotoTag', 'delay', 'Position', [80 134 145 149], 'ShowName', 'off');
add_line(subsys, 'thruster_delay/1', 'goto_delay/1');

% Add the thruster_ontime input port
add_block('built-in/Inport', [subsys '/thruster_ontime'], 'BackgroundColor', 'green', 'Port', '1', 'Position',[20 78 50 92]);

% Add the 'transition' concatenate and its output port, and connect the two
transition_concat_h = sc_num_thruster*20;
add_block('built-in/Concatenate', [subsys '/transition_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_thruster), 'Position', [700 95 705 (95+transition_concat_h)]);
add_block('built-in/Outport', [subsys '/transition_vec'], 'BackgroundColor', 'red', 'Port', '1', 'Position', [750 (95+transition_concat_h/2-7) 780 (95+transition_concat_h/2+7)]);
add_line(subsys, 'transition_concatenate/1', 'transition_vec/1');

% Add the seconds concatenate and its output port -
add_block('built-in/Concatenate', [subsys '/time_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_thruster), 'Position', [900 95 905 (95+transition_concat_h)]);
add_block('built-in/Outport', [subsys '/time_vec'], 'BackgroundColor', 'red', 'Port', '2', 'Position', [950 (95+transition_concat_h/2-7) 980 (95+transition_concat_h/2+7)]);
add_line(subsys, 'time_concatenate/1', 'time_vec/1');

% % Add the subseconds concatenate and its output port 
% add_block('built-in/Concatenate', [subsys '/subseconds_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_thruster), 'Mode', 'Multidimensional array', 'ConcatenateDimension', '1', 'Position', [1100 95 1105 (95+transition_concat_h)]);
% add_block('built-in/Outport', [subsys '/subseconds_vec'], 'BackgroundColor', 'red', 'Port', '3', 'Position', [1150 (95+transition_concat_h/2-7) 1180 (95+transition_concat_h/2+7)]);
% add_line(subsys, 'subseconds_concatenate/1', 'subseconds_vec/1');

new_transition_from_pos = [600 95 680 110];
new_seconds_from_pos = [800 95 880 110];
new_subseconds_from_pos = [1000 95 1080 110];

csu_vlv_pos = [270 70 420 145];

for i=1:sc_num_thruster
    thrust_num = thruster_list(i);

    i_str = num2str(i);

    % Add the 'transition' from block and attach it to the 'transition' vector concatenate
    add_block('built-in/From', [subsys '/transition' i_str '_from'], 'BackgroundColor', 'magenta', 'GotoTag', ['transition' i_str], 'ShowName', 'off', 'Position', new_transition_from_pos);
    add_line(subsys, ['transition' i_str '_from/1'], ['transition_concatenate/' i_str]);
    
    % Add the 'seconds' from block and attach it to the 'seconds' vector concatenate
    add_block('built-in/From', [subsys '/t_time' i_str '_from'], 'BackgroundColor', 'orange', 'GotoTag', ['t_time' i_str], 'ShowName', 'off', 'Position', new_seconds_from_pos);
    add_line(subsys, ['t_time' i_str '_from/1'], ['time_concatenate/' i_str]);
    
%     % Add the 'subseconds' from block and attach it to the 'subseconds' vector concatenate
%     add_block('built-in/From', [subsys '/subseconds' i_str '_from'], 'BackgroundColor', 'gray', 'GotoTag', ['subseconds' i_str], 'ShowName', 'off', 'Position', new_subseconds_from_pos);
%     add_line(subsys, ['subseconds' i_str '_from/1'], ['subseconds_concatenate/' i_str]);

    % Add the valvesim block
    exr_params = {i_str, num2str(sc_num_thruster)};
    add_block('csc_valvesim_sim_lib/csc_valvesim_sim', [subsys '/csc_valvesim_sim' i_str], 'MaskValues', exr_params, 'Position', csu_vlv_pos);

    % Add the delay input from tag
    delay_from_x = csu_vlv_pos(1) - 75;
    delay_from_y = csu_vlv_pos(2) + 30;
    add_block('built-in/From', [subsys '/delay_from' i_str], 'BackgroundColor', 'cyan', 'GotoTag', 'delay', 'ShowName', 'off', 'Position', [delay_from_x delay_from_y (delay_from_x+55) (delay_from_y+15)]);
    add_line(subsys, ['delay_from' i_str '/1'], ['csc_valvesim_sim' i_str '/2']);
    
     % Add the time input from tag
    time_from_x = csu_vlv_pos(1) - 75;
    time_from_y = csu_vlv_pos(2) + 55;
    add_block('built-in/From', [subsys '/time_from' i_str], 'BackgroundColor', timeColor, 'GotoTag', 'time', 'ShowName', 'off', 'Position', [time_from_x time_from_y (time_from_x+55) (time_from_y+15)]);
    add_line(subsys, ['time_from' i_str '/1'], ['csc_valvesim_sim' i_str '/3']);

    % Add the new 'transition' output goto tag
    trans_x = csu_vlv_pos(3) + 25;
    trans_y = csu_vlv_pos(2) + 10;
    add_block('built-in/Goto', [subsys '/transition' i_str '_goto'], 'BackgroundColor', 'magenta', 'GotoTag', ['transition' i_str], 'ShowName', 'off', 'Position', [trans_x trans_y (trans_x+80) (trans_y+15)]);
    add_line(subsys, ['csc_valvesim_sim' i_str '/1'], ['transition' i_str '_goto/1']);
    
    % Add the new 'seconds' output goto tag
    sec_x = csu_vlv_pos(3) + 25;
    sec_y = csu_vlv_pos(2) + 50;
    add_block('built-in/Goto', [subsys '/t_time' i_str '_goto'], 'BackgroundColor', 'orange', 'GotoTag', ['t_time' i_str], 'ShowName', 'off', 'Position', [sec_x sec_y (sec_x+80) (sec_y+15)]);
    add_line(subsys, ['csc_valvesim_sim' i_str '/2'], ['t_time' i_str '_goto/1']);
    
%     % Add the new 'seconds' output goto tag
%     sub_x = csu_vlv_pos(3) + 25;
%     sub_y = csu_vlv_pos(2) + 55;
%     add_block('built-in/Goto', [subsys '/subseconds' i_str '_goto'], 'BackgroundColor', 'gray', 'GotoTag', ['subseconds' i_str], 'ShowName', 'off', 'Position', [sub_x sub_y (sub_x+80) (sub_y+15)]);
%     add_line(subsys, ['csc_valvesim_sim' i_str '/3'], ['subseconds' i_str '_goto/1']);
 

    csu_vlv_pos = csu_vlv_pos + [0 95 0 95];
    new_transition_from_pos = new_transition_from_pos + [0 20 0 20];
    new_seconds_from_pos    = new_seconds_from_pos + [0 20 0 20];
    new_subseconds_from_pos = new_subseconds_from_pos + [0 20 0 20];

end

% Post-Processing -- laying these lines down earlier would result in them running through blocks

for i = sc_num_thruster : -1 : 1
    i_str = num2str(i);
    add_line(subsys, 'thruster_ontime/1', ['csc_valvesim_sim' i_str '/1'], 'autorouting', 'on');
    
end

% We're done! Save, close, and exit
if gen_for_mtv
    fprintf(1,'Saving for MTV\n')
    save_system(sys, [nimbus_root '/mtv/sim/' sys '.slx']);
else
    fprintf(1,'Saving for NIMBUS\n')
    save_system(sys, [nimbus_root '/sim/hil_sim/' sys '.slx']);
end

close_system(sys);


end

