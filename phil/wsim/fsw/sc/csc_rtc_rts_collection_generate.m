%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2010 - 2015 Moon Express, Inc.
% All Rights Reserved.
%
% PROPRIETARY DATA NOTICE:
% The data herein include Proprietary Data and are restricted under the
% Data Rights provisions of Lunar CATALYST Space Act Agreement
% No. SAAM ID# 18251 and Reimbursable Space Act Agreement No.SAA2-402930.
% All information contained herein is and remains proprietary to and the
% property of Moon Express, Inc. Dissemination of this information or
% reproduction of this material is strictly forbidden unless prior
% written permission is obtained from Moon Express, Inc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function csc_rtc_rts_collection_generate(sc_rts_list)

nimbus_root = getenv('NIMBUS_ROOT');
if isempty(nimbus_root)
    error('NIMBUS_ROOT is not set -- first run nimbus_set_path');
end

sys = 'csc_rtc_rts_collection_lib';
subsys = [sys '/csc_rtc_rts_collection'];

sc_num_rts = length(sc_rts_list);
support_str = [num2str(sc_num_rts) ':' mat2str(sc_rts_list)];

% First, see if we actually have any work to do, and then if we do, try to
% be lazy
try
    load_system(sys);
    % Get the supported RTS string from the subsystem's user data
    current_support_str = get_param(subsys, 'UserData');

    % Check to see if what we want is what csc_rtc already supports
    if isempty(current_support_str)
        current_support_str = '0:[]';
    end

    if strcmp(support_str, current_support_str)
        close_system(sys);
        return;
    end

    % Check to see if it at least supports the right number of RTS's --
    % this will let us simply change parameters instead of regenerating the
    % whole thing
    current_num_rts = sscanf(current_support_str, '%u:');
    if ~isempty(current_num_rts) && sc_num_rts == current_num_rts
        fprintf(1, 'Updating used RTS numbers in csc_rtc_rts_collection paramters...\n');
        set_param(sys, 'Lock', 'off');
        for i=1:sc_num_rts
            % Build up the parameter array for each RTS and apply it to an
            % execute RTS block
            rts_num = sc_rts_list(i);
            rts_num_str = sprintf('%03u', rts_num);

            i_str = num2str(i);

            exr_params = {num2str(rts_num) ['sc_rts' rts_num_str '_cmd_time'] ['sc_rts' rts_num_str '_cmd_data']};
            set_param([subsys '/csu_exr_execute_rts' i_str], 'MaskValues', exr_params);
        end

        set_param(subsys, 'UserData', support_str);

        % Parameters updated, save and quit
        save_system(sys);
        close_system(sys);
        return;
    end
catch
    % nimbus_set_path has been run, and library couldn't be opened, so let's
    % make a new one
    new_system(sys, 'Library');
    load_system(sys);
end

% At this point, we have the existing library open but know we can't
% use anything that's in it -- nuke the csc_rtc subsystem so we can
% start fresh
fprintf(1, 'Detected RTS changes, regenerating csc_rtc_rts_collection...\n');
set_param(sys, 'Lock', 'off');

try
    delete_block(subsys);
catch
    % Subsystem doesn't exist -- no bother
end

rtc_mask_display = ...
[ ...
    'color(''blue'');' ...
    'text(0.05, 0.02, ''MoonEx'', ''HorizontalAlignment'', ''Left'', ''VerticalAlignment'', ''Bottom'');' ...
    'color(''red'');' ...
    'text(0.95, 0.02, ''Autogenerated'', ''HorizontalAlignment'', ''Right'', ''VerticalAlignment'', ''Bottom'');' ...
];

% Add the actual subsystem and set its userdata equal to the support string
add_block('built-in/Subsystem', subsys, 'BackgroundColor', 'yellow', 'UserData', support_str, 'UserDataPersistent', 'on', 'MaskDisplay', rtc_mask_display, 'MaskIconOpaque', 'off', 'Position', [200 200 415 340]);
add_block('built-in/Note', [subsys '/AUTOGENERATED BY ' mfilename ' FROM' char(10) 'NIMBUS_ROOT//scenarios//rts' char(10) 'DO NOT EDIT'], 'FontWeight', 'bold', 'FontSize', '14', 'Position', [700 0 0 -40]);

timeColor = '[0.262745, 0.458824, 0.650980]';

% Add the time inport and its corresponding goto
add_block('built-in/Inport', [subsys '/time'], 'BackgroundColor', 'green', 'Port', '2', 'Position', [20 40 50 54]);
add_block('built-in/Goto', [subsys '/goto_time'], 'BackgroundColor', timeColor, 'GotoTag', 'time', 'Position', [100 36 155 51], 'ShowName', 'off');
add_line(subsys, 'time/1', 'goto_time/1');

% Add the information block to the subsystem
add_block('util_info_lib/Library Information', [subsys '/Library Information'], 'MaskValues', {'''escrane'''}, 'Position', [0 -300 430 -100]);


% Add the ATS Start RTS inport and start RTS vector concatenate
add_block('built-in/Inport', [subsys '/ats_start_rts'], 'BackgroundColor', 'green', 'Port', '1', 'Position',[20 80 50 94]);
add_block('built-in/Concatenate', [subsys '/start_rts_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_rts+1), 'Position', [165 75 170 (75+(sc_num_rts+1)*20)]);
add_line(subsys, 'ats_start_rts/1', 'start_rts_concatenate/1');

% Add the New RTS concatenate and its output port, and connect the two
new_rts_concat_h = sc_num_rts*20;
add_block('built-in/Concatenate', [subsys '/new_rts_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_rts), 'Position', [700 95 705 (95+new_rts_concat_h)]);
add_block('built-in/Outport', [subsys '/new_rts_vec'], 'BackgroundColor', 'red', 'Port', '1', 'Position', [750 (95+new_rts_concat_h/2-7) 780 (95+new_rts_concat_h/2+7)]);
add_line(subsys, 'new_rts_concatenate/1', 'new_rts_vec/1');

% Add the command row concatenate and its output port -- wait until later
% to draw the line between them so we can auto-route around the new RTS
% stuff
add_block('built-in/Concatenate', [subsys '/cmd_row_concatenate'], 'ShowName', 'off', 'NumInputs', num2str(sc_num_rts), 'Mode', 'Multidimensional array', 'ConcatenateDimension', '1', 'Position', [550 85 555 (85+sc_num_rts*10)]);
add_block('built-in/Outport', [subsys '/rts_cmds'], 'BackgroundColor', 'red', 'Port', '2', 'Position', [750 70 780 84]);

start_rts_from_pos = [70 95 150 110];
new_rts_from_pos = [600 95 680 110];
csu_exr_pos = [270 50 420 125];

for i=1:sc_num_rts
    rts_num = sc_rts_list(i);
    rts_num_str = sprintf('%03u', rts_num);

    i_str = num2str(i);

    % Add the start RTS from block and attach it to the 'start' vector concatenate
    add_block('built-in/From', [subsys '/start_rts' i_str '_from'], 'BackgroundColor', 'orange', 'GotoTag', ['start_rts' i_str], 'ShowName', 'off', 'Position', start_rts_from_pos);
    add_line(subsys, ['start_rts' i_str '_from/1'], ['start_rts_concatenate/' num2str(i+1)]);

    % Add the new RTS from block and attach it to the 'new' vector concatenate
    add_block('built-in/From', [subsys '/new_rts' i_str '_from'], 'BackgroundColor', 'magenta', 'GotoTag', ['new_rts' i_str], 'ShowName', 'off', 'Position', new_rts_from_pos);
    add_line(subsys, ['new_rts' i_str '_from/1'], ['new_rts_concatenate/' i_str]);

    % Add the execute RTS block
    exr_params = {num2str(rts_num) ['sc_rts' rts_num_str '_cmd_time'] ['sc_rts' rts_num_str '_cmd_data']};
    add_block('csu_exr_execute_rts_lib/csu_exr_execute_rts', [subsys '/csu_exr_execute_rts' i_str], 'MaskValues', exr_params, 'Position', csu_exr_pos);

    % Add the time input from tag
    time_from_x = csu_exr_pos(1) - 75;
    time_from_y = csu_exr_pos(2) + 10;
    add_block('built-in/From', [subsys '/time_from' i_str], 'BackgroundColor', timeColor, 'GotoTag', 'time', 'ShowName', 'off', 'Position', [time_from_x time_from_y (time_from_x+55) (time_from_y+15)]);
    add_line(subsys, ['time_from' i_str '/1'], ['csu_exr_execute_rts' i_str '/1']);

    % Add the new RTS output goto tag
    new_rts_x = csu_exr_pos(3) + 25;
    new_rts_y = csu_exr_pos(2) + 5;
    add_block('built-in/Goto', [subsys '/new_rts' i_str '_goto'], 'BackgroundColor', 'magenta', 'GotoTag', ['new_rts' i_str], 'ShowName', 'off', 'Position', [new_rts_x new_rts_y (new_rts_x+80) (new_rts_y+15)]);
    add_line(subsys, ['csu_exr_execute_rts' i_str '/1'], ['new_rts' i_str '_goto/1']);

    % Add the start RTS output goto tag
    start_rts_x = csu_exr_pos(3) + 25;
    start_rts_y = csu_exr_pos(4) - 20;
    add_block('built-in/Goto', [subsys '/start_rts' i_str '_goto'], 'BackgroundColor', 'orange', 'GotoTag', ['start_rts' i_str], 'ShowName', 'off', 'Position', [start_rts_x start_rts_y (start_rts_x+80) (start_rts_y+15)]);
    add_line(subsys, ['csu_exr_execute_rts' i_str '/3'], ['start_rts' i_str '_goto/1']);

    csu_exr_pos = csu_exr_pos + [0 95 0 95];
    start_rts_from_pos = start_rts_from_pos + [0 20 0 20];
    new_rts_from_pos = new_rts_from_pos + [0 20 0 20];

end

% Post-Processing -- laying these lines down earlier would result in them
% running through blocks
add_line(subsys, 'cmd_row_concatenate/1', 'rts_cmds/1', 'autorouting', 'on');

for i=1:sc_num_rts
    i_str = num2str(i);
    add_line(subsys, 'start_rts_concatenate/1', ['csu_exr_execute_rts' i_str '/2'], 'autorouting', 'on');
    add_line(subsys, ['csu_exr_execute_rts' i_str '/2'], ['cmd_row_concatenate/' i_str], 'autorouting', 'on');
end

% We're done! Save, close, and exit
save_system(sys, [nimbus_root '/fsw/sc/csc_rtc_rts_collection_lib.slx']);
close_system(sys);

end

