%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2010 - 2015 Moon Express, Inc.
% All Rights Reserved.
%
% PROPRIETARY DATA NOTICE:
% The data herein include Proprietary Data and are restricted under the
% Data Rights provisions of Lunar CATALYST Space Act Agreement
% No. SAAM ID# 18251 and Reimbursable Space Act Agreement No.SAA2-402930.
% All information contained herein is and remains proprietary to and the
% property of Moon Express, Inc. Dissemination of this information or
% reproduction of this material is strictly forbidden unless prior
% written permission is obtained from Moon Express, Inc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function test_bus_input_generate(varargin)

% We'll be generating a few files in fixed locations relative to
% NIMBUS_ROOT
nimbus_root = getenv('NIMBUS_ROOT');
if isempty(nimbus_root)
    error('NIMBUS_ROOT is not set -- first run nimbus_set_path');
end

% By default, this script creates an initialization file that wires a
% configurable subset of telemetry up. However, if the option 'zero' is
% specified, constant zeroes will be hooked up instead.
zero = false;

if nargin < 1
    % We at least need to have a bus name
    error('You must provide a bus object name');
else
    % The first argument should be the name of a bus structure that exists
    % in the base workspace
    bus_name = varargin{1};
    try
        localBus = evalin('base', bus_name);
        
        % We've located a variable of the right name, now check to see if
        % it's really a bus definition
        if ~isa(localBus, 'Simulink.Bus')
            error(['Variable ' bus_name ' is not a Simulink.Bus object.']);
        end
    catch
        error(['Bus object ' bus_name ' not found in workspace.']);
    end
    
    % Now check for optional arguments
    for i=2:nargin
        if strcmpi(varargin{i}, 'zero')
            % We'll be putting out zeros instead of from workspace blocks
            zero = true;
        else
            % Somebody got too option-happy (or can't spell zero)
            error(['Unknown option ' varargin{i}])
        end
    end
end

% Build up the simulink library and subsystem names
sys = [bus_name '_hrn_initialization'];
subsys = [sys '/' bus_name '_init'];

% If the library we're working with already exists, we can simply open it
% up and delete its contents. Otherwise we'll just make a new one
fprintf(1, 'Generating %s...\n', sys);
try
    load_system(sys);
    % At this point, we have the existing library open -- nuke the subsystem so we can start fresh
    set_param(sys, 'Lock', 'off');
    try
        delete_block(subsys);
    catch
        % Subsystem doesn't exist -- no bother, don't trip the outer try
    end
catch
    % Library doesn't exist, so make a new one
    new_system(sys, 'Library');
    load_system(sys);
end

% Open file for writing initialization
if ~zero
    fid = fopen(fullfile(nimbus_root, 'common', 'bus_initialization', [sys '_script.m']), 'w');
end

% Figure out the three-letter acronym of the bus (which we'll use for
% naming things) and the number of elements in the bus (which we'll use for
% sizing and placing all of our blocks)
tla = bus_name(1:3);
n_fields = length(localBus.Elements);

% Add an autogeneration warning -- we don't want this stuff added to the
% repository
add_block('built-in/Note', [sys '/AUTOGENERATED BY ' mfilename char(10) 'DO NOT CHECK IN'], 'FontWeight', 'bold', 'FontSize', '14', 'Position', [300 0 0 -40]);

% Create the container subystem and add its output port
add_block('built-in/Subsystem', subsys, 'BackgroundColor', 'gray', 'Position', [100 100 315 240]);
add_block('built-in/Outport', [subsys '/bus_out'], 'BackgroundColor', 'red', 'Port', '1', 'Position', [700 (80+60*n_fields)/2+21 735 (80+60*n_fields)/2+39]);


% Create the bus creator that will bring balance to the force
add_block('built-in/BusCreator', [subsys '/chosen_bus_creator'], 'ShowName', 'off', 'Inputs', int2str(n_fields), 'Position', [600 60 605 (80+60*n_fields)], ...
           'OutDataTypeStr', ['Bus: ' bus_name], 'NonVirtualBus','on');
add_line(subsys, 'chosen_bus_creator/1', 'bus_out/1')

% Set the name of our fancy new line
p = get_param([subsys '/chosen_bus_creator'], 'PortHandles');
l = get_param(p.Outport, 'Line');
set_param(l, 'Name', bus_name)

for jj = 1 : n_fields
    element_name = localBus.Elements(jj).Name;
    element_dims = localBus.Elements(jj).Dimensions;
    element_type = localBus.Elements(jj).DataType;

    if strcmp(element_name, 'cfe_tlm_header_align')
        % This signal is a telemetry header alignment signal. Add the
        % dedicated cfe_tlm_header_aling block for it.
        block_name = 'cfe_header';
        add_block('util_common_lib/cfe_tlm_header_align', [subsys '/' block_name], 'Position', [250 78+60*(jj-1) 450 118+60*(jj-1)]);
        
    elseif ~isempty(regexpi(element_name, '^pad')) || ~isempty(regexpi(element_name, '^spare'))
        % Padding signal, use the special padding block
        % TODO: Make the above check less flimsy
        block_name = ['byte_pad' num2str(jj)];
        add_block('util_common_lib/byte_pad', [subsys '/' block_name], 'Position', [250 78+60*(jj-1) 450 118+60*(jj-1)],'MaskValues',{num2str(element_dims)});

    elseif exist(element_type) ~= 5
        % This is probably a sub-bus. We'll need to generate stuff for it
        % too -- which involves calling this function with the same
        % arguments, but for the sub-bus name
        argument_string = ['''' element_type ''''];
        
        % Add on the rest of the arguments, quoting strings as necessary
        for kk = 2 : nargin
            if isstr(varargin{kk})
                argument_string = [argument_string ', ''' varargin{kk} ''''];
            else
                argument_string = [argument_string ', ' num2str(varargin{kk})];
            end
        end
        
        % And finally perform the call
        eval(['test_bus_input_generate('  argument_string ')']);
        
        % Now that we've generated the needed subsystem, add it
        block_name = element_type;
        add_block([element_type '_hrn_initialization/' element_type '_init'], [subsys '/' block_name], 'Position', [250 78+60*(jj-1) 450 118+60*(jj-1)]);
        
        % And if we're not in zero mode, write out a call to the generated
        % script in our current script
        if ~zero
            fprintf(fid, '%s_hrn_initialization_script;\n\n', element_type);
        end
    else
        % This is a real signal that needs real data
        if zero
            % We're just plumbing with direct constant blocks this time.
            % First we need to create the zeros expression for that block.
            if length(element_dims) == 1
                constant_value = sprintf('zeros(1,%i,''%s'')', element_dims(1), localBus.Elements(jj).DataType);
            else
                % Create a comma-separated string of the dimensions to give
                % to zeros
                dim_string = sprintf('%u,', element_dims);
                constant_value = sprintf(['zeros(' dim_string '''%s'')'], localBus.Elements(jj).DataType);
            end
            
            block_name = ['constant' num2str(jj)];
            add_block('built-in/Constant', [subsys '/' block_name], 'ShowName', 'off', 'Position', [250 78+60*(jj-1) 450 118+60*(jj-1)], 'Value', constant_value);
        else
            % We're using from workspace blocks to plumb data in.
            var_name_string = [element_name '_in'];
            block_name = ['from_workspace' num2str(jj)];
            
            add_block('built-in/FromWorkspace',[subsys '/' block_name], 'ShowName','off','Position', [250 78+60*(jj-1) 450 118+60*(jj-1)], 'VariableName', var_name_string)

            % Build up proper dimension selection strings
            colon_string = repmat(',:', 1, length(element_dims));
            dim_string = sprintf(',%u', element_dims);
            
            % Write out from workspace structure
            fprintf(fid,'%s.time               = t;\n', var_name_string);
            
            % Magic -- I am not sure this always works
            reshaped_tlm = ['reshape(telem.%s.%s.Data(n_telem_start:n_telem_end' colon_string ')'',n_telem_end-n_telem_start+1' dim_string ')'];
            
            fprintf(fid,['%s.signals.values     = %s( ' reshaped_tlm ' );\n'], var_name_string, element_type, tla, element_name);
            fprintf(fid,'%s.signals.dimensions = [ %s];\n\n', var_name_string, strrep(dim_string, ',', ' '));
        end
    end
    
    % Add a line between the new block and the Chosen One
    add_line(subsys, [block_name '/1'], ['chosen_bus_creator/' num2str(jj)]);
    p = get_param([subsys '/' block_name], 'PortHandles');
    l = get_param(p.Outport, 'Line');
    set_param(l, 'Name', element_name);
end

% We're done! Save, close, and exit
save_system(sys, [nimbus_root [ filesep 'common' filesep 'bus_initialization' filesep sys '.slx']]);
close_system(sys);

if ~zero
    fclose(fid);
end

end

