%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2010 - 2015 Moon Express, Inc.
% All Rights Reserved.
%
% PROPRIETARY DATA NOTICE:
% The data herein include Proprietary Data and are restricted under the
% Data Rights provisions of Lunar CATALYST Space Act Agreement
% No. SAAM ID# 18251 and Reimbursable Space Act Agreement No.SAA2-402930.
% All information contained herein is and remains proprietary to and the
% property of Moon Express, Inc. Dissemination of this information or
% reproduction of this material is strictly forbidden unless prior
% written permission is obtained from Moon Express, Inc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% fsw_get_model_rates.m
% This will print out all of the csc block rates for the FSW.
% Currently being used for setting the rate that each block runs
% in cFE.
%

function fsw_get_model_rates(varargin)
%default args
if nargin == 2
    model = varargin{1};
    filenm = varargin{2};
    fid = fopen(filenm, 'w+');
elseif nargin == 1
    model = 'nimbus';
    filenm = varargin{1};
    fid = fopen(filenm, 'w+');
else
    model = 'nimbus'
    filenm = ' ';
    fid = 1;
end

%-------------------------------------------------------------------------

blks = find_system(model,'SearchDepth','3','FollowLinks','on','BlockType','SubSystem');

%
% Print out top of header file info
fprintf(fid, '/*\n');
fprintf(fid, '**    File:%s\n', filenm);
fprintf(fid, '**\n');
fprintf(fid, '** Model Rate information for %s csci_fsw\n',model);
fprintf(fid, '**\n');
fprintf(fid, '**  Autogenerated, Do Not Edit\n');
fprintf(fid, '**\n');
fprintf(fid, '*/\n\n');
fprintf(fid, '#ifndef CSC_MODEL_HZ_H\n');
fprintf(fid, '#define CSC_MODEL_HZ_H\n\n');

for i=1:length(blks)
    sample_time = get_param(blks{i},'CompiledSampleTime');

    %Get the model tags and break them into an array of key-value pairs
    tag = get_param(blks{i}, 'Tag');

    %This regex is less scary than it looks -- it matches either two
    %words separated by (optionally) whitespace and an equal sign, or a word by
    %itself (with the value being an empty string). Delimiters between
    %key-value pairs can be just about anything, but normally they
    %should be semicolons
    options = regexp(tag, '(?<key>\w+)\s*=\s*(?<value>\w+)|(?<key>\w+)(?<value>)','names');
    if ~isempty(options)
        optionsMap = containers.Map({options.key}, {options.value});
    else
        optionsMap = containers.Map;
    end

    %Only generate tick information if they are tagged OFSW
    if isKey(optionsMap,'OFSW') || isKey(optionsMap, 'GSSE')
        hz = 0;
        if (sample_time(1) > 0)
            hz = (1 / sample_time(1));
        end

        name = get_param(blks{i}, 'Name');
        shortname = regexp(name, '^csc_[a-zA-Z]+', 'match', 'once');
        if isempty(shortname)
            shortname = name;
        end

        hzname = strcat(upper(shortname), '_TICK_MID');

        if isKey(optionsMap,'MDL_TICK')
            tick_msg_name = regexprep(upper(optionsMap('MDL_TICK')),'_MSG$','_MID');
            fprintf(fid, '#define %-25s %s\n', hzname, tick_msg_name);
        else
            fprintf(fid, '#define %-25s TICK_%dHZ_MID\n', hzname, hz);
        end

        if isKey(optionsMap, 'MDL_RATE_TRANSITION')
            rtname = strcat(upper(shortname), '_RT_MID');
            rateTransition = str2double(optionsMap('MDL_RATE_TRANSITION'));
            if rateTransition >= hz
                error('%s: MDL_RATE_TRANSITION must be less than sampling frequency.', name);
            end
            fprintf(fid, '#define %-25s TICK_%dHZ_MID\n', rtname, rateTransition);
        end
    end
end

fprintf(fid, '\n#endif\n');

if fid ~= 1
    fclose(fid);
end

end

